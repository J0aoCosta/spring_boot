pipeline {
    agent {
        dockerfile {
            dir 'jenkins'
            args '-v /root/.m2:/root/.m2'
        }
    }

    options {
        disableConcurrentBuilds()
    }

    environment {
        CHECKSTYLE_FILE = 'jenkins/checkstyle.xml'
        UNIT_TESTS_PATH = 'com.training.springboot.*Test'
        SONAR_ADDRESS = 'http://172.18.0.1:9000'
        NEXUS_ADDRESS = '172.18.0.1:8081'
        SONAR_PROPERTIES = 'jenkins/project.properties'
        JENKINS_SONAR_INSTALATION = 'Sonarqube'
		GIT_URL='app.celfocus.com/gitlab/NB27514/spring-boot-backend-project-moises-diogo.git'
    }

    stages {
        stage('Build and test') {
            steps {
                sh "mvn clean test"
                step([$class: 'JacocoPublisher', execPattern: 'target/jacoco.exec', exclusionPattern: '**/Main.class'])

                withSonarQubeEnv("${JENKINS_SONAR_INSTALATION}") {
                    sh "sonar-scanner -Dsonar.host.url=${SONAR_ADDRESS} -Dproject.settings=${SONAR_PROPERTIES}"
                }
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Continuous Integration - Merge to develop') {
            when {
                branch "CICD-*"
            }
            steps {
                sh "git config --global user.email 'NB27514'"
                sh "git config --global user.name 'DiogoSantos'"
                sh "git checkout -f origin/develop"
                sh "git merge --ff ${env.GIT_COMMIT}"
                script {
                    String gitRepo = "${env.GIT_URL}"
                    withCredentials([usernamePassword(credentialsId: 'git-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git -c http.sslVerify=false push https://${GIT_USERNAME}:${GIT_PASSWORD}@${gitRepo} HEAD:develop"
                    }
                }
            }
        }

        stage('Continuous Integration - Merge to master') {
            when {
                branch "develop"
            }
            steps {
                sh "git config --global user.email 'NB27514'"
                sh "git config --global user.name 'DiogoSantos'"
                sh "git checkout -f origin/master"
                sh "git merge --ff ${env.GIT_COMMIT}"
                script {
                    String pomVersion =  readMavenPom().getVersion()
                    sh "git tag ${pomVersion}"
                    String gitRepo = "${env.GIT_URL}"
                     withCredentials([usernamePassword(credentialsId: 'git-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git -c http.sslVerify=false push https://${GIT_USERNAME}:${GIT_PASSWORD}@${gitRepo} HEAD:master ${pomVersion}"
                    }

                }
            }
        }

        stage('Continuous Delivery') {
            when {
                branch "master"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    sh "mvn deploy -Dnexus.address=http://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@${env.NEXUS_ADDRESS} -DaltDeploymentRepository=releaseRepository::default::http://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@${env.NEXUS_ADDRESS}/repository/maven-releases -DskipTests"
                }
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}